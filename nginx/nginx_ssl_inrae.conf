map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

access_log /var/log/nginx/acces.log;
error_log /var/log/nginx/error.log;

lua_package_path '/opt/lua/?.lua;;';

resolver 8.8.8.8 valid=30s;

# create caches 
lua_shared_dict introspection 10m;
lua_shared_dict session_cache_realm1 10m;

server {
      listen 0.0.0.0:80 default_server;
      listen [::]:80 default_server;
      listen 443 ssl;

      server_name mydomain.fr;

      root     /usr/local/openresty/nginx/html/;

      ssl_protocols TLSv1.2 TLSv1.3;
      ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
      ssl_certificate  /opt/certs/domain.pem;
      ssl_certificate_key  /opt/certs/domain.key;
      ssl_session_cache   shared:SSL:10m;
      ssl_session_timeout 10m;

      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Credentials' 'true';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

      # Timeoout
      proxy_read_timeout 300;
      proxy_connect_timeout 300;
      proxy_send_timeout 300; 

      # Upload max size
      client_max_body_size  300M;

      #  caching is disabled so the browser won't cache the site.
      expires       0;
      add_header    Cache-Control private;

      location /maggot/ {
         access_by_lua_block {
             require("sessions_store")
             if ngx.req.get_headers()["API-KEY"] ~= nil then
                local opts = {
                   discovery = "https://mydomain.fr:8443/realms/Maggot/.well-known/openid-configuration",
                   client_id = "api-maggot",
                   client_secret = "14RdoHCQhL9Zxm2kyD6WL9qkhY8gmrq7",
                   session_contents = {id_token=true},
                   ssl_verify = "no"
                }
                -- call bearer_jwt_verify for OAuth 2.0 JWT validation
                local res, err = require("resty.openidc").bearer_jwt_verify(opts)
                if err then
                   ngx.status = 403
                   ngx.exit(ngx.HTTP_FORBIDDEN)
                end
             else
                local opts = {
                   redirect_uri = "https://mydomain.fr/maggot/redirect_uri",
                   discovery = "https://authentification.preproduction.inrae.fr/.well-known/openid-configuration",
                   client_id = "MAGGOT-TEST-WAPNMR",
                   client_secret = "e7856785678fjdkfjsdkfjsdklfjsdklfjsdklfjkvnsdkfjzeijdkvhjsdjkfsdkfjkds",
                   scope = "openid profile email supannEntiteAffectation",
                   access_token_expires_leeway = 1800,
                   renew_access_token_on_expiry = false,
                   redirect_uri_scheme = "https",
                   logout_path = "/maggot/logout",
                   revoke_tokens_on_logout = true,
                   redirect_after_logout_uri = "https://authentification.preproduction.inrae.fr/oauth2/logout?client_id=MAGGOT-TEST-WAPNMR",
                   redirect_after_logout_with_id_token_hint = false,
                   session_contents = {id_token=true, access_token=true},
       	           session_store = shared_dict_session_store("session_cache_realm1"),
                   ssl_verify = "no"
                }
                -- ngx.DEBUG = ngx.STDERR 
                local res, err, target_url, session = require("resty.openidc").authenticate(opts,nil,nil,{name=opts.client_id, audience=opts.client_id})
                if err then
                   ngx.status = 403
                   ngx.exit(ngx.HTTP_FORBIDDEN)
                end
       	        local token = require("cjson").encode(session:get("id_token"))
                local jw_token = 'XX.' .. ngx.encode_base64(token) .. '.XX'
       	        -- ngx.log(ngx.STDERR,'Token : ' .. token)
       	        -- ngx.log(ngx.STDERR,'Acces_Token : ' .. res.access_token)
       	        ngx.req.set_header("Authorization", "Bearer " .. jw_token)
       	        ngx.req.set_header("ID_Token", res.access_token)
       	        ngx.req.set_header("IP_NAME", "INRAE_PREPROD")
             end
         }

         proxy_set_header Host $host;
         proxy_set_header X-App-Name 'maggot';
         proxy_set_header X-Real-Ip $remote_addr;
         proxy_set_header X-Forwarded-Proto $scheme;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_http_version 1.1;
         proxy_redirect off;
         proxy_buffering off;
         proxy_set_header Upgrade $http_upgrade;
         proxy_set_header Connection "upgrade";
         set $upstream_maggot mmdt-web;
         proxy_pass http://mmdt-web/;
      }

      location / {
         autoindex on;
         autoindex_exact_size off;
         root /usr/local/openresty/nginx/html/;
      }

      # redirect server error pages to the static page /40x.html
      error_page 404 /404.html;
      location = /40x.html { }

      # redirect server error pages to the static page /50x.html
      error_page 500 502 503 504 /50x.html;
      location = /50x.html {
         root /usr/local/openresty/nginx/html/;
      }
}
