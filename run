#!/bin/bash
MYDIR="$(cd "$(dirname "$0")" || exit; pwd -P;)"
DOCKER='sudo '`which docker`

# Host Name or IP
HOSTNAME=mydomain.fr

# Nginx with OIDC
NGINX_IMAGE=nginx-image
NGINX_CONTAINER=nginx
NGINX_PORT=443

# NGINX configuration files
#NGINX_CONF=nginx.conf
NGINX_CONF=nginx_ssl.conf 
#NGINX_CONF=nginx_ssl_inrae.conf 

# Postgres
PG_IMAGE=postgres-image
PG_CONTAINER=postgres
PG_PORT=5432
PG_VOL=postgres_data
PGDATA_DIR=/opt/mydomain/pgdata_save

# Keycloak
KC_IMAGE=keycloak-image
KC_CONTAINER=keycloak
KC_PORT=8443

# Wait message
WAITMSG=1

# Network
MYNET=my-net

usage() {
    echo "usage: sh $0 help|build|delimage|ps|start|stop"
    exit 1
}


CMD=$1

case "$CMD" in
    help) usage
    ;;
    build)
        (cd nginx;    $DOCKER build -t $NGINX_IMAGE . )
        (cd postgres; $DOCKER build -t $PG_IMAGE .    )
        (cd keycloak; $DOCKER build -t $KC_IMAGE .    )
    ;;
    delimages)
        $DOCKER rmi -f $($DOCKER images | grep '-image' | sed -e "s/  \+/@/g" | cut -d'@' -f3)
    ;;
    start)
    # postgres volume
        RET=$($DOCKER volume ls | grep $PG_VOL 1>/dev/null 2>/dev/null; echo $?)
        [ $RET -ne 0 ] && $DOCKER volume create --driver local $PG_VOL
    # Create Network
        RET=$($DOCKER network ls | grep $MYNET 1>/dev/null 2>/dev/null; echo $?)
        [ $RET -ne 0 ] && $DOCKER network create -d bridge $MYNET
        # Create nginx configuration file based on the template
    # Start Postgres
        echo -n "Start $PG_CONTAINER ($PG_IMAGE) (port $PG_PORT) : "
        $DOCKER run -d -p $PG_PORT:5432 --network=$MYNET -v $PG_VOL:/var/lib/postgresql/data --name $PG_CONTAINER $PG_IMAGE
    # Start Keycloak
        echo -n "Start $KC_CONTAINER ($KC_IMAGE) (port $KC_PORT) : "
        ENV_SSL=""
        [ $WAITMSG  -eq 1 ] && sudo echo '' > $MYDIR/logs/keycloak.log
        [ $KC_PORT -eq 8443 ] && ENV_SSL="--env-file $MYDIR/keycloak/keycloak_ssl.env" 
        sudo chmod 644 $MYDIR/certs/*
        $DOCKER run -d -p $KC_PORT:$KC_PORT --network=$MYNET --env-file $MYDIR/keycloak/keycloak.env $ENV_SSL \
                    -v $MYDIR/keycloak/themes:/opt/keycloak/themes \
                    -v $MYDIR/certs:/opt/keycloak/certs \
                    -v $MYDIR/logs:/tmp \
                    --name $KC_CONTAINER $KC_IMAGE start \
                    --log-level=info --log="file" --log-file="/tmp/keycloak.log"
    # Start Nginx
        echo -n "Start $NGINX_CONTAINER ($NGINX_IMAGE) (port $NGINX_PORT) :"
        $DOCKER run -d -p 80:80 -p $NGINX_PORT:$NGINX_PORT --network=$MYNET \
              -v $MYDIR/nginx/$NGINX_CONF:/etc/nginx/conf.d/default.conf \
              -v $MYDIR/nginx/lua:/opt/lua \
              -v $MYDIR/certs:/opt/certs \
              -v $MYDIR/web:/usr/local/openresty/nginx/html \
              --name $NGINX_CONTAINER $NGINX_IMAGE
       if [ $WAITMSG  -eq 1 ]; then
           echo -n "Wait for Keycloak to finish its setup : "
           while [ $($DOCKER exec -t $KC_CONTAINER /bin/bash -c "cat /tmp/keycloak.log" | wc -l) -lt 20 ]; do echo -n "."; sleep 1; done
           echo OK
       fi
    ;;
    stop)
        $DOCKER network disconnect $MYNET $NGINX_CONTAINER
        $DOCKER network disconnect $MYNET $KC_CONTAINER
        $DOCKER network disconnect $MYNET $PG_CONTAINER
        echo "Stop $NGINX_CONTAINER $KC_CONTAINER $PG_CONTAINER" 
        $DOCKER rm -f $NGINX_CONTAINER $KC_CONTAINER $PG_CONTAINER
    ;;
    restart)
       sh $0 stop
       sh $0 start
    ;;
    master)
        KC_CMD=/opt/keycloak/bin/kcadm.sh
        KC_OPT1="config credentials --realm master --server http://$HOSTNAME:$KC_PORT --user admin"
        KC_OPT2="create users --realm master -s username=master -s enabled=true"
        KC_OPT3="add-roles --uusername master --rolename admin"
        $DOCKER exec -t $KC_CONTAINER /bin/bash -c "$KC_CMD $KC_OPT1 --password=\"\$KEYCLOAK_ADMIN_PASSWORD\"; $KC_CMD $KC_OPT2;  $KC_CMD $KC_OPT3"
    ;;
    http) # force HTTP protocol to be authorised
        KC_CMD=/opt/keycloak/bin/kcadm.sh
        KC_OPT1="config credentials --realm master --server http://$HOSTNAME:$KC_PORT --user admin"
        KC_OPT2="update realms/master -s sslRequired=NONE"
        $DOCKER exec -t $KC_CONTAINER /bin/bash -c "$KC_CMD $KC_OPT1 --password=\"\$KEYCLOAK_ADMIN_PASSWORD\"; $KC_CMD $KC_OPT2"
    ;;
    pgsave)
        DATE_INFO=$(date "+%Y%m%d-%H%M%S")
        $DOCKER run --rm --mount source=${PG_VOL},target=/mnt -v ${PGDATA_DIR}:/backup busybox \
                tar -cvzf /backup/pgdata-${DATE_INFO}.tar.gz /mnt
        (
            cd $PGDATA_DIR
            [ -f pgdata.tar.gz ] && sudo rm -f pgdata.tar.gz
            sudo ln -s pgdata-${DATE_INFO}.tar.gz pgdata.tar.gz
        )
    ;;
    pgrestore)
        if [ -f ${PGDATA_DIR}/pgdata.tar.gz ]; then
             $DOCKER run --rm --mount source=${PG_VOL},target=/mnt -v ${PGDATA_DIR}:/backup busybox \
                    tar -xvzf /backup/pgdata.tar.gz -C /
        fi
    ;;
    ps)
        $DOCKER ps | head -1
        $DOCKER ps | grep -E "($NGINX_CONTAINER|$KC_CONTAINER|$PG_CONTAINER)"
    ;;
    *) usage
esac

exit 0
